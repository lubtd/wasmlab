/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  Addr,
  InstantiateMsg,
  VaultInfo,
  ExecuteMsg,
  LockMsg,
  TriggerUnlockMsg,
  CompleteUnlockMsg,
  QueryMsg,
  MigrateMsg,
  LockedResponse,
  Timestamp,
  Uint64,
  UnlockingResponse,
  UnlockingTokens,
  VaultInfoResponse,
} from "./Vault.types";
export interface VaultReadOnlyInterface {
  contractAddress: string;
  vaultInfo: () => Promise<VaultInfoResponse>;
  locked: ({ addr }: { addr: Addr }) => Promise<LockedResponse>;
  unlocking: ({ addr }: { addr: Addr }) => Promise<UnlockingResponse>;
}
export class VaultQueryClient implements VaultReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.vaultInfo = this.vaultInfo.bind(this);
    this.locked = this.locked.bind(this);
    this.unlocking = this.unlocking.bind(this);
  }

  vaultInfo = async (): Promise<VaultInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_info: {},
    });
  };
  locked = async ({ addr }: { addr: Addr }): Promise<LockedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      locked: {
        addr,
      },
    });
  };
  unlocking = async ({ addr }: { addr: Addr }): Promise<UnlockingResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unlocking: {
        addr,
      },
    });
  };
}
export interface VaultInterface extends VaultReadOnlyInterface {
  contractAddress: string;
  sender: string;
  lock: (
    {
      addr,
      amount,
    }: {
      addr: Addr;
      amount: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  triggerUnlock: (
    {
      addr,
      amount,
    }: {
      addr: Addr;
      amount: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  completeUnlock: (
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class VaultClient extends VaultQueryClient implements VaultInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.lock = this.lock.bind(this);
    this.triggerUnlock = this.triggerUnlock.bind(this);
    this.completeUnlock = this.completeUnlock.bind(this);
  }

  lock = async (
    {
      addr,
      amount,
    }: {
      addr: Addr;
      amount: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        lock: {
          addr,
          amount,
        },
      },
      fee,
      memo,
      funds
    );
  };
  triggerUnlock = async (
    {
      addr,
      amount,
    }: {
      addr: Addr;
      amount: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        trigger_unlock: {
          addr,
          amount,
        },
      },
      fee,
      memo,
      funds
    );
  };
  completeUnlock = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        complete_unlock: {},
      },
      fee,
      memo,
      funds
    );
  };
}
